---
import { ModeToggle } from "./ModeToggle";

const navItems = [
  { href: "#home", text: "Home" },
  { href: "#blog", text: "Blog" },
  { href: "#projects", text: "Projects" },
  { href: "#gallery", text: "Gallery" },
];
---

<header
  class="fixed top-0 left-0 right-0 z-50 dark:bg-zinc-950 bg-white flex items-center justify-center flex-col transition-colors border-b border-white dark:border-zinc-950 data-[active=true]:border-border"
  id="navbar"
>
  <nav class="container mx-auto px-8 h-16 flex items-center justify-center">
    <ul class="flex items-center justify-center">
      {
        navItems.map((item) => (
          <li class="mx-1 md:mx-2">
            <a
              href={item.href}
              class="dark:text-zinc-300 text-zinc-950 hover:text-zinc-700 dark:hover:text-zinc-200 transition-colors duration-200 px-3 py-2 rounded-md text-sm font-medium data-[active=true]:dark:text-white data-[active=true]:bg-zinc-300 data-[active=true]:dark:bg-zinc-800"
            >
              {item.text}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
  <div class="absolute right-0 pr-4 top-16 mt-4 md:top-auto md:mt-0">
    <ModeToggle client:load />
  </div>
</header>

<script>
  const navLinks = document.querySelectorAll(
    "nav a",
  ) as NodeListOf<HTMLAnchorElement>;
  const sections = document.querySelectorAll("section");
  const navHeight = document.querySelector("header")?.offsetHeight ?? 0;
  const navbar = document.getElementById("navbar");

  function updateActiveLink() {
    const scrollPosition =
      window.scrollY + navHeight + (window.innerHeight - navHeight) / 2;

    if (navbar) {
      if (window.scrollY === 0) {
        navbar.dataset.active = "false";
      } else {
        navbar.dataset.active = "true";
      }
    }

    sections.forEach((section, index) => {
      const sectionTop = section.offsetTop;
      const sectionBottom = sectionTop + section.offsetHeight;

      if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
        navLinks.forEach((link) => {
          link.dataset.active = "false";
        });
        navLinks[index].dataset.active = "true";
        history.replaceState(null, "", navLinks[index].getAttribute("href"));
      }
    });
  }

  window.addEventListener("scroll", updateActiveLink, { passive: true });
  window.addEventListener("scrollsnapchange", updateActiveLink);
  updateActiveLink();

  navLinks.forEach((link) => {
    link.addEventListener("click", (e) => {
      e.preventDefault();
      const targetId = (link.getAttribute("href") as string).substring(1);
      const targetSection = document.getElementById(targetId);
      if (targetSection) {
        const targetPosition = targetSection.offsetTop - navHeight;
        window.scrollTo({
          top: targetPosition,
          behavior: "smooth",
        });
      }
    });
  });
</script>
